// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: chtransfer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CCTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // unique transfer id
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`     // channel from
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`         // channel to
	Token  string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`   // transfer token
	User   []byte `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`     // token holder
	Amount []byte `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"` // number of tokens
	// Transfer direction is an additional variable made for convenience
	// so that you don't have to calculate it every time. It is calculated 1 time when filling the structure
	// when executing a transaction.
	// Different balances change depending on the direction.
	// Examples:
	// Direct transfer: we transfer A tokens from channel A to channel B
	// or transfer B tokens from channel B to channel A
	// Reverse transfer:from channel A to channel B transfer tokens B
	// or from channel B to channel A transfer tokens A
	ForwardDirection bool  `protobuf:"varint,7,opt,name=forward_direction,json=forwardDirection,proto3" json:"forward_direction,omitempty"`
	IsCommit         bool  `protobuf:"varint,8,opt,name=isCommit,proto3" json:"isCommit,omitempty"`                            // phase 2 sign
	TimeAsNanos      int64 `protobuf:"varint,9,opt,name=time_as_nanos,json=timeAsNanos,proto3" json:"time_as_nanos,omitempty"` // transfer creation time in nanoseconds
}

func (x *CCTransfer) Reset() {
	*x = CCTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chtransfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTransfer) ProtoMessage() {}

func (x *CCTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_chtransfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTransfer.ProtoReflect.Descriptor instead.
func (*CCTransfer) Descriptor() ([]byte, []int) {
	return file_chtransfer_proto_rawDescGZIP(), []int{0}
}

func (x *CCTransfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CCTransfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CCTransfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CCTransfer) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CCTransfer) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CCTransfer) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CCTransfer) GetForwardDirection() bool {
	if x != nil {
		return x.ForwardDirection
	}
	return false
}

func (x *CCTransfer) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

func (x *CCTransfer) GetTimeAsNanos() int64 {
	if x != nil {
		return x.TimeAsNanos
	}
	return 0
}

type CCTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark string        `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	Ccts     []*CCTransfer `protobuf:"bytes,2,rep,name=ccts,proto3" json:"ccts,omitempty"`
}

func (x *CCTransfers) Reset() {
	*x = CCTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chtransfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTransfers) ProtoMessage() {}

func (x *CCTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_chtransfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTransfers.ProtoReflect.Descriptor instead.
func (*CCTransfers) Descriptor() ([]byte, []int) {
	return file_chtransfer_proto_rawDescGZIP(), []int{1}
}

func (x *CCTransfers) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

func (x *CCTransfers) GetCcts() []*CCTransfer {
	if x != nil {
		return x.Ccts
	}
	return nil
}

type CCMultiTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From             string            `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To               string            `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	User             []byte            `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Items            []*CCTransferItem `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
	ForwardDirection bool              `protobuf:"varint,6,opt,name=forward_direction,json=forwardDirection,proto3" json:"forward_direction,omitempty"`
	IsCommit         bool              `protobuf:"varint,7,opt,name=isCommit,proto3" json:"isCommit,omitempty"`
	TimeAsNanos      int64             `protobuf:"varint,8,opt,name=time_as_nanos,json=timeAsNanos,proto3" json:"time_as_nanos,omitempty"`
}

func (x *CCMultiTransfer) Reset() {
	*x = CCMultiTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chtransfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCMultiTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMultiTransfer) ProtoMessage() {}

func (x *CCMultiTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_chtransfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMultiTransfer.ProtoReflect.Descriptor instead.
func (*CCMultiTransfer) Descriptor() ([]byte, []int) {
	return file_chtransfer_proto_rawDescGZIP(), []int{2}
}

func (x *CCMultiTransfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CCMultiTransfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CCMultiTransfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CCMultiTransfer) GetUser() []byte {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CCMultiTransfer) GetItems() []*CCTransferItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CCMultiTransfer) GetForwardDirection() bool {
	if x != nil {
		return x.ForwardDirection
	}
	return false
}

func (x *CCMultiTransfer) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

func (x *CCMultiTransfer) GetTimeAsNanos() int64 {
	if x != nil {
		return x.TimeAsNanos
	}
	return 0
}

type CCTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Amount []byte `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CCTransferItem) Reset() {
	*x = CCTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chtransfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCTransferItem) ProtoMessage() {}

func (x *CCTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_chtransfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCTransferItem.ProtoReflect.Descriptor instead.
func (*CCTransferItem) Descriptor() ([]byte, []int) {
	return file_chtransfer_proto_rawDescGZIP(), []int{3}
}

func (x *CCTransferItem) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CCTransferItem) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

type CCMultiTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookmark string             `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	Ccts     []*CCMultiTransfer `protobuf:"bytes,2,rep,name=ccts,proto3" json:"ccts,omitempty"`
}

func (x *CCMultiTransfers) Reset() {
	*x = CCMultiTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chtransfer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCMultiTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMultiTransfers) ProtoMessage() {}

func (x *CCMultiTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_chtransfer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMultiTransfers.ProtoReflect.Descriptor instead.
func (*CCMultiTransfers) Descriptor() ([]byte, []int) {
	return file_chtransfer_proto_rawDescGZIP(), []int{4}
}

func (x *CCMultiTransfers) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

func (x *CCMultiTransfers) GetCcts() []*CCMultiTransfer {
	if x != nil {
		return x.Ccts
	}
	return nil
}

var File_chtransfer_proto protoreflect.FileDescriptor

var file_chtransfer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x43, 0x43,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x41, 0x73, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x0b, 0x43,
	0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x43, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x63, 0x63, 0x74, 0x73, 0x22, 0xf3, 0x01,
	0x0a, 0x0f, 0x43, 0x43, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x73, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x10, 0x43, 0x43, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x43, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x63, 0x63, 0x74, 0x73, 0x42,
	0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x6f, 0x69, 0x64, 0x65, 0x61, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_chtransfer_proto_rawDescOnce sync.Once
	file_chtransfer_proto_rawDescData = file_chtransfer_proto_rawDesc
)

func file_chtransfer_proto_rawDescGZIP() []byte {
	file_chtransfer_proto_rawDescOnce.Do(func() {
		file_chtransfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_chtransfer_proto_rawDescData)
	})
	return file_chtransfer_proto_rawDescData
}

var file_chtransfer_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chtransfer_proto_goTypes = []any{
	(*CCTransfer)(nil),       // 0: proto.CCTransfer
	(*CCTransfers)(nil),      // 1: proto.CCTransfers
	(*CCMultiTransfer)(nil),  // 2: proto.CCMultiTransfer
	(*CCTransferItem)(nil),   // 3: proto.CCTransferItem
	(*CCMultiTransfers)(nil), // 4: proto.CCMultiTransfers
}
var file_chtransfer_proto_depIdxs = []int32{
	0, // 0: proto.CCTransfers.ccts:type_name -> proto.CCTransfer
	3, // 1: proto.CCMultiTransfer.items:type_name -> proto.CCTransferItem
	2, // 2: proto.CCMultiTransfers.ccts:type_name -> proto.CCMultiTransfer
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_chtransfer_proto_init() }
func file_chtransfer_proto_init() {
	if File_chtransfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chtransfer_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CCTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chtransfer_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CCTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chtransfer_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CCMultiTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chtransfer_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CCTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chtransfer_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CCMultiTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chtransfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chtransfer_proto_goTypes,
		DependencyIndexes: file_chtransfer_proto_depIdxs,
		MessageInfos:      file_chtransfer_proto_msgTypes,
	}.Build()
	File_chtransfer_proto = out.File
	file_chtransfer_proto_rawDesc = nil
	file_chtransfer_proto_goTypes = nil
	file_chtransfer_proto_depIdxs = nil
}
