// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: batch.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType int32

const (
	KeyType_ed25519   KeyType = 0
	KeyType_secp256k1 KeyType = 1
	KeyType_gost      KeyType = 2
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "ed25519",
		1: "secp256k1",
		2: "gost",
	}
	KeyType_value = map[string]int32{
		"ed25519":   0,
		"secp256k1": 1,
		"gost":      2,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_batch_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{0}
}

type MultiSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator []byte   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner   []byte   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Token   string   `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	From    string   `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To      string   `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Hash    []byte   `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	Timeout int64    `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Assets  []*Asset `protobuf:"bytes,9,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *MultiSwap) Reset() {
	*x = MultiSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSwap) ProtoMessage() {}

func (x *MultiSwap) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSwap.ProtoReflect.Descriptor instead.
func (*MultiSwap) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{0}
}

func (x *MultiSwap) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MultiSwap) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *MultiSwap) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *MultiSwap) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *MultiSwap) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *MultiSwap) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *MultiSwap) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MultiSwap) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *MultiSwap) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group  string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Amount []byte `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{1}
}

func (x *Asset) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Asset) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator []byte `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner   []byte `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Token   string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Amount  []byte `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	From    string `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To      string `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	Hash    []byte `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	Timeout int64  `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{2}
}

func (x *Swap) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Swap) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Swap) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Swap) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Swap) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Swap) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Swap) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Swap) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Swap) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SwapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SwapKey) Reset() {
	*x = SwapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapKey) ProtoMessage() {}

func (x *SwapKey) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapKey.ProtoReflect.Descriptor instead.
func (*SwapKey) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{3}
}

func (x *SwapKey) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SwapKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIDs          [][]byte     `protobuf:"bytes,1,rep,name=txIDs,proto3" json:"txIDs,omitempty"`
	Swaps          []*Swap      `protobuf:"bytes,2,rep,name=swaps,proto3" json:"swaps,omitempty"`
	Keys           []*SwapKey   `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	MultiSwapsKeys []*SwapKey   `protobuf:"bytes,4,rep,name=multi_swaps_keys,json=multiSwapsKeys,proto3" json:"multi_swaps_keys,omitempty"`
	MultiSwaps     []*MultiSwap `protobuf:"bytes,5,rep,name=multi_swaps,json=multiSwaps,proto3" json:"multi_swaps,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{4}
}

func (x *Batch) GetTxIDs() [][]byte {
	if x != nil {
		return x.TxIDs
	}
	return nil
}

func (x *Batch) GetSwaps() []*Swap {
	if x != nil {
		return x.Swaps
	}
	return nil
}

func (x *Batch) GetKeys() []*SwapKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Batch) GetMultiSwapsKeys() []*SwapKey {
	if x != nil {
		return x.MultiSwapsKeys
	}
	return nil
}

func (x *Batch) GetMultiSwaps() []*MultiSwap {
	if x != nil {
		return x.MultiSwaps
	}
	return nil
}

type InitArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformSKI []byte   `protobuf:"bytes,1,opt,name=platformSKI,proto3" json:"platformSKI,omitempty"`
	RobotSKI    []byte   `protobuf:"bytes,2,opt,name=robotSKI,proto3" json:"robotSKI,omitempty"`
	Args        []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *InitArgs) Reset() {
	*x = InitArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitArgs) ProtoMessage() {}

func (x *InitArgs) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitArgs.ProtoReflect.Descriptor instead.
func (*InitArgs) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{5}
}

func (x *InitArgs) GetPlatformSKI() []byte {
	if x != nil {
		return x.PlatformSKI
	}
	return nil
}

func (x *InitArgs) GetRobotSKI() []byte {
	if x != nil {
		return x.RobotSKI
	}
	return nil
}

func (x *InitArgs) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsDeleted bool   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
}

func (x *WriteElement) Reset() {
	*x = WriteElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteElement) ProtoMessage() {}

func (x *WriteElement) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteElement.ProtoReflect.Descriptor instead.
func (*WriteElement) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{6}
}

func (x *WriteElement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WriteElement) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WriteElement) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type ResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []byte          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error  *ResponseError  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Writes []*WriteElement `protobuf:"bytes,3,rep,name=writes,proto3" json:"writes,omitempty"`
}

func (x *SwapResponse) Reset() {
	*x = SwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapResponse) ProtoMessage() {}

func (x *SwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapResponse.ProtoReflect.Descriptor instead.
func (*SwapResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{8}
}

func (x *SwapResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SwapResponse) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SwapResponse) GetWrites() []*WriteElement {
	if x != nil {
		return x.Writes
	}
	return nil
}

type AccountingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Sender    []byte `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient []byte `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    []byte `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Reason    string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AccountingRecord) Reset() {
	*x = AccountingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountingRecord) ProtoMessage() {}

func (x *AccountingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountingRecord.ProtoReflect.Descriptor instead.
func (*AccountingRecord) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{9}
}

func (x *AccountingRecord) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AccountingRecord) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AccountingRecord) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *AccountingRecord) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *AccountingRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{10}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     []byte          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Method string          `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Error  *ResponseError  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Writes []*WriteElement `protobuf:"bytes,4,rep,name=writes,proto3" json:"writes,omitempty"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{11}
}

func (x *TxResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TxResponse) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TxResponse) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TxResponse) GetWrites() []*WriteElement {
	if x != nil {
		return x.Writes
	}
	return nil
}

type BatchTxEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Method     string              `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Error      *ResponseError      `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Result     []byte              `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Events     []*Event            `protobuf:"bytes,6,rep,name=events,proto3" json:"events,omitempty"`
	Accounting []*AccountingRecord `protobuf:"bytes,7,rep,name=accounting,proto3" json:"accounting,omitempty"`
}

func (x *BatchTxEvent) Reset() {
	*x = BatchTxEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTxEvent) ProtoMessage() {}

func (x *BatchTxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTxEvent.ProtoReflect.Descriptor instead.
func (*BatchTxEvent) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{12}
}

func (x *BatchTxEvent) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchTxEvent) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BatchTxEvent) GetError() *ResponseError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BatchTxEvent) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BatchTxEvent) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BatchTxEvent) GetAccounting() []*AccountingRecord {
	if x != nil {
		return x.Accounting
	}
	return nil
}

type BatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*BatchTxEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *BatchEvent) Reset() {
	*x = BatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEvent) ProtoMessage() {}

func (x *BatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEvent.ProtoReflect.Descriptor instead.
func (*BatchEvent) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{13}
}

func (x *BatchEvent) GetEvents() []*BatchTxEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type BatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxResponses      []*TxResponse   `protobuf:"bytes,1,rep,name=tx_responses,json=txResponses,proto3" json:"tx_responses,omitempty"`
	CreatedSwaps     []*Swap         `protobuf:"bytes,2,rep,name=created_swaps,json=createdSwaps,proto3" json:"created_swaps,omitempty"`
	SwapResponses    []*SwapResponse `protobuf:"bytes,3,rep,name=swap_responses,json=swapResponses,proto3" json:"swap_responses,omitempty"`
	SwapKeyResponses []*SwapResponse `protobuf:"bytes,4,rep,name=swap_key_responses,json=swapKeyResponses,proto3" json:"swap_key_responses,omitempty"`
	CreatedMultiSwap []*MultiSwap    `protobuf:"bytes,5,rep,name=created_multi_swap,json=createdMultiSwap,proto3" json:"created_multi_swap,omitempty"`
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{14}
}

func (x *BatchResponse) GetTxResponses() []*TxResponse {
	if x != nil {
		return x.TxResponses
	}
	return nil
}

func (x *BatchResponse) GetCreatedSwaps() []*Swap {
	if x != nil {
		return x.CreatedSwaps
	}
	return nil
}

func (x *BatchResponse) GetSwapResponses() []*SwapResponse {
	if x != nil {
		return x.SwapResponses
	}
	return nil
}

func (x *BatchResponse) GetSwapKeyResponses() []*SwapResponse {
	if x != nil {
		return x.SwapKeyResponses
	}
	return nil
}

func (x *BatchResponse) GetCreatedMultiSwap() []*MultiSwap {
	if x != nil {
		return x.CreatedMultiSwap
	}
	return nil
}

type Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Nested) Reset() {
	*x = Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nested) ProtoMessage() {}

func (x *Nested) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nested.ProtoReflect.Descriptor instead.
func (*Nested) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{15}
}

func (x *Nested) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type TokenFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Fee      []byte `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Floor    []byte `protobuf:"bytes,3,opt,name=floor,proto3" json:"floor,omitempty"`
	Cap      []byte `protobuf:"bytes,4,opt,name=cap,proto3" json:"cap,omitempty"`
}

func (x *TokenFee) Reset() {
	*x = TokenFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFee) ProtoMessage() {}

func (x *TokenFee) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFee.ProtoReflect.Descriptor instead.
func (*TokenFee) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{16}
}

func (x *TokenFee) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TokenFee) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TokenFee) GetFloor() []byte {
	if x != nil {
		return x.Floor
	}
	return nil
}

func (x *TokenFee) GetCap() []byte {
	if x != nil {
		return x.Cap
	}
	return nil
}

type TokenRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealType string   `protobuf:"bytes,1,opt,name=deal_type,json=dealType,proto3" json:"deal_type,omitempty"`
	Currency string   `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Rate     []byte   `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	Min      []byte   `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	Max      []byte   `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
	Issuer   *Address `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *TokenRate) Reset() {
	*x = TokenRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRate) ProtoMessage() {}

func (x *TokenRate) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRate.ProtoReflect.Descriptor instead.
func (*TokenRate) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{17}
}

func (x *TokenRate) GetDealType() string {
	if x != nil {
		return x.DealType
	}
	return ""
}

func (x *TokenRate) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TokenRate) GetRate() []byte {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *TokenRate) GetMin() []byte {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TokenRate) GetMax() []byte {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TokenRate) GetIssuer() *Address {
	if x != nil {
		return x.Issuer
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEmission []byte       `protobuf:"bytes,1,opt,name=total_emission,json=totalEmission,proto3" json:"total_emission,omitempty"`
	Fee           *TokenFee    `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Rates         []*TokenRate `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty"`
	FeeAddress    []byte       `protobuf:"bytes,4,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{18}
}

func (x *Token) GetTotalEmission() []byte {
	if x != nil {
		return x.TotalEmission
	}
	return nil
}

func (x *Token) GetFee() *TokenFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Token) GetRates() []*TokenRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *Token) GetFeeAddress() []byte {
	if x != nil {
		return x.FeeAddress
	}
	return nil
}

type HaveRight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveRight bool `protobuf:"varint,1,opt,name=haveRight,proto3" json:"haveRight,omitempty"`
}

func (x *HaveRight) Reset() {
	*x = HaveRight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HaveRight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaveRight) ProtoMessage() {}

func (x *HaveRight) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaveRight.ProtoReflect.Descriptor instead.
func (*HaveRight) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{19}
}

func (x *HaveRight) GetHaveRight() bool {
	if x != nil {
		return x.HaveRight
	}
	return false
}

type Right struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName   string     `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	ChaincodeName string     `protobuf:"bytes,2,opt,name=chaincodeName,proto3" json:"chaincodeName,omitempty"`
	RoleName      string     `protobuf:"bytes,3,opt,name=roleName,proto3" json:"roleName,omitempty"`
	OperationName string     `protobuf:"bytes,4,opt,name=operationName,proto3" json:"operationName,omitempty"`
	Address       *Address   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	HaveRight     *HaveRight `protobuf:"bytes,6,opt,name=haveRight,proto3" json:"haveRight,omitempty"`
}

func (x *Right) Reset() {
	*x = Right{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Right) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Right) ProtoMessage() {}

func (x *Right) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Right.ProtoReflect.Descriptor instead.
func (*Right) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{20}
}

func (x *Right) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Right) GetChaincodeName() string {
	if x != nil {
		return x.ChaincodeName
	}
	return ""
}

func (x *Right) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *Right) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *Right) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Right) GetHaveRight() *HaveRight {
	if x != nil {
		return x.HaveRight
	}
	return nil
}

type AccountRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Rights  []*Right `protobuf:"bytes,2,rep,name=rights,proto3" json:"rights,omitempty"`
}

func (x *AccountRights) Reset() {
	*x = AccountRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRights) ProtoMessage() {}

func (x *AccountRights) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRights.ProtoReflect.Descriptor instead.
func (*AccountRights) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{21}
}

func (x *AccountRights) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccountRights) GetRights() []*Right {
	if x != nil {
		return x.Rights
	}
	return nil
}

type Accounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *Accounts) Reset() {
	*x = Accounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accounts) ProtoMessage() {}

func (x *Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accounts.ProtoReflect.Descriptor instead.
func (*Accounts) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{22}
}

func (x *Accounts) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Operations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []string `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *Operations) Reset() {
	*x = Operations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operations) ProtoMessage() {}

func (x *Operations) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operations.ProtoReflect.Descriptor instead.
func (*Operations) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{23}
}

func (x *Operations) GetOperations() []string {
	if x != nil {
		return x.Operations
	}
	return nil
}

type OperationRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationName string   `protobuf:"bytes,1,opt,name=operationName,proto3" json:"operationName,omitempty"`
	Rights        []*Right `protobuf:"bytes,2,rep,name=rights,proto3" json:"rights,omitempty"`
}

func (x *OperationRights) Reset() {
	*x = OperationRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRights) ProtoMessage() {}

func (x *OperationRights) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRights.ProtoReflect.Descriptor instead.
func (*OperationRights) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{24}
}

func (x *OperationRights) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *OperationRights) GetRights() []*Right {
	if x != nil {
		return x.Rights
	}
	return nil
}

type Industrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups      []*IndustrialGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Fee         *TokenFee          `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	Rates       []*TokenRate       `protobuf:"bytes,3,rep,name=rates,proto3" json:"rates,omitempty"`
	FeeAddress  []byte             `protobuf:"bytes,4,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty"`
	Initialized bool               `protobuf:"varint,5,opt,name=initialized,proto3" json:"initialized,omitempty"`
}

func (x *Industrial) Reset() {
	*x = Industrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Industrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Industrial) ProtoMessage() {}

func (x *Industrial) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Industrial.ProtoReflect.Descriptor instead.
func (*Industrial) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{25}
}

func (x *Industrial) GetGroups() []*IndustrialGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Industrial) GetFee() *TokenFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Industrial) GetRates() []*TokenRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

func (x *Industrial) GetFeeAddress() []byte {
	if x != nil {
		return x.FeeAddress
	}
	return nil
}

func (x *Industrial) GetInitialized() bool {
	if x != nil {
		return x.Initialized
	}
	return false
}

type IndustrialGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Emission []byte `protobuf:"bytes,2,opt,name=emission,proto3" json:"emission,omitempty"`
	Maturity int64  `protobuf:"varint,3,opt,name=maturity,proto3" json:"maturity,omitempty"`
	Note     string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *IndustrialGroup) Reset() {
	*x = IndustrialGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndustrialGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndustrialGroup) ProtoMessage() {}

func (x *IndustrialGroup) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndustrialGroup.ProtoReflect.Descriptor instead.
func (*IndustrialGroup) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{26}
}

func (x *IndustrialGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IndustrialGroup) GetEmission() []byte {
	if x != nil {
		return x.Emission
	}
	return nil
}

func (x *IndustrialGroup) GetMaturity() int64 {
	if x != nil {
		return x.Maturity
	}
	return 0
}

func (x *IndustrialGroup) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KycHash     string `protobuf:"bytes,1,opt,name=kycHash,proto3" json:"kycHash,omitempty"`
	GrayListed  bool   `protobuf:"varint,2,opt,name=grayListed,proto3" json:"grayListed,omitempty"`
	BlackListed bool   `protobuf:"varint,3,opt,name=blackListed,proto3" json:"blackListed,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{27}
}

func (x *AccountInfo) GetKycHash() string {
	if x != nil {
		return x.KycHash
	}
	return ""
}

func (x *AccountInfo) GetGrayListed() bool {
	if x != nil {
		return x.GrayListed
	}
	return false
}

func (x *AccountInfo) GetBlackListed() bool {
	if x != nil {
		return x.BlackListed
	}
	return false
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Address      []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	IsIndustrial bool   `protobuf:"varint,3,opt,name=isIndustrial,proto3" json:"isIndustrial,omitempty"`
	IsMultisig   bool   `protobuf:"varint,4,opt,name=isMultisig,proto3" json:"isMultisig,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{28}
}

func (x *Address) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Address) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Address) GetIsIndustrial() bool {
	if x != nil {
		return x.IsIndustrial
	}
	return false
}

func (x *Address) GetIsMultisig() bool {
	if x != nil {
		return x.IsMultisig
	}
	return false
}

type AdditionalKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyBase58 string   `protobuf:"bytes,1,opt,name=publicKeyBase58,proto3" json:"publicKeyBase58,omitempty"`
	Labels          []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *AdditionalKey) Reset() {
	*x = AdditionalKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalKey) ProtoMessage() {}

func (x *AdditionalKey) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalKey.ProtoReflect.Descriptor instead.
func (*AdditionalKey) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{29}
}

func (x *AdditionalKey) GetPublicKeyBase58() string {
	if x != nil {
		return x.PublicKeyBase58
	}
	return ""
}

func (x *AdditionalKey) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type SignedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         *Address         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SignedTx        []string         `protobuf:"bytes,2,rep,name=signedTx,proto3" json:"signedTx,omitempty"`
	SignaturePolicy *SignaturePolicy `protobuf:"bytes,5,opt,name=signaturePolicy,proto3" json:"signaturePolicy,omitempty"`
	Reason          string           `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	ReasonId        int32            `protobuf:"varint,7,opt,name=reasonId,proto3" json:"reasonId,omitempty"`
	AdditionalKeys  []*AdditionalKey `protobuf:"bytes,8,rep,name=additionalKeys,proto3" json:"additionalKeys,omitempty"`
}

func (x *SignedAddress) Reset() {
	*x = SignedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedAddress) ProtoMessage() {}

func (x *SignedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedAddress.ProtoReflect.Descriptor instead.
func (*SignedAddress) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{30}
}

func (x *SignedAddress) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SignedAddress) GetSignedTx() []string {
	if x != nil {
		return x.SignedTx
	}
	return nil
}

func (x *SignedAddress) GetSignaturePolicy() *SignaturePolicy {
	if x != nil {
		return x.SignaturePolicy
	}
	return nil
}

func (x *SignedAddress) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SignedAddress) GetReasonId() int32 {
	if x != nil {
		return x.ReasonId
	}
	return 0
}

func (x *SignedAddress) GetAdditionalKeys() []*AdditionalKey {
	if x != nil {
		return x.AdditionalKeys
	}
	return nil
}

type SignaturePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N                   uint32   `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	PubKeys             [][]byte `protobuf:"bytes,3,rep,name=pubKeys,proto3" json:"pubKeys,omitempty"`
	ReplaceKeysSignedTx []string `protobuf:"bytes,4,rep,name=replaceKeysSignedTx,proto3" json:"replaceKeysSignedTx,omitempty"`
}

func (x *SignaturePolicy) Reset() {
	*x = SignaturePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignaturePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignaturePolicy) ProtoMessage() {}

func (x *SignaturePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignaturePolicy.ProtoReflect.Descriptor instead.
func (*SignaturePolicy) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{31}
}

func (x *SignaturePolicy) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *SignaturePolicy) GetPubKeys() [][]byte {
	if x != nil {
		return x.PubKeys
	}
	return nil
}

func (x *SignaturePolicy) GetReplaceKeysSignedTx() []string {
	if x != nil {
		return x.ReplaceKeysSignedTx
	}
	return nil
}

type AclResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  *AccountInfo   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Address  *SignedAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	KeyTypes []KeyType      `protobuf:"varint,3,rep,packed,name=keyTypes,proto3,enum=proto.KeyType" json:"keyTypes,omitempty"`
}

func (x *AclResponse) Reset() {
	*x = AclResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclResponse) ProtoMessage() {}

func (x *AclResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclResponse.ProtoReflect.Descriptor instead.
func (*AclResponse) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{32}
}

func (x *AclResponse) GetAccount() *AccountInfo {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AclResponse) GetAddress() *SignedAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AclResponse) GetKeyTypes() []KeyType {
	if x != nil {
		return x.KeyTypes
	}
	return nil
}

type Nonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []uint64 `protobuf:"varint,1,rep,packed,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Nonce) Reset() {
	*x = Nonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nonce) ProtoMessage() {}

func (x *Nonce) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nonce.ProtoReflect.Descriptor instead.
func (*Nonce) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{33}
}

func (x *Nonce) GetNonce() []uint64 {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type PendingTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Sender *Address `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Args   []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// bytes ______________ = 4; the field has been deleted, avoid reusing it
	Timestamp int64   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce     uint64  `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pairs     []*Pair `protobuf:"bytes,7,rep,name=pairs,proto3" json:"pairs,omitempty"` // key-value pairs for telemetry settings storage
}

func (x *PendingTx) Reset() {
	*x = PendingTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingTx) ProtoMessage() {}

func (x *PendingTx) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingTx.ProtoReflect.Descriptor instead.
func (*PendingTx) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{34}
}

func (x *PendingTx) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PendingTx) GetSender() *Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PendingTx) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *PendingTx) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PendingTx) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PendingTx) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// key-value pairs for telemetry settings storage
type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{35}
}

func (x *Pair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Pair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_batch_proto protoreflect.FileDescriptor

var file_batch_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77,
	0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x22, 0x35, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x2b, 0x0a, 0x07, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xd1, 0x01,
	0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x49, 0x44, 0x73, 0x12, 0x21, 0x0a,
	0x05, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x05, 0x73, 0x77, 0x61, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x77,
	0x61, 0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x0e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x31,
	0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x77, 0x61, 0x70, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70,
	0x73, 0x22, 0x5c, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x4b, 0x49, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x4b, 0x49, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x4b, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x4b, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x55, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x77, 0x0a, 0x0c, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a,
	0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0xd9,
	0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x39, 0x0a, 0x0a, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0b, 0x74, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x73, 0x77,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x52, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x77, 0x61, 0x70, 0x22, 0x1c,
	0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x60, 0x0a, 0x08,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x61, 0x70, 0x22, 0xa4,
	0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x26, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x29, 0x0a, 0x09, 0x48, 0x61, 0x76, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x61, 0x76, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x76, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xeb, 0x01,
	0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x68,
	0x61, 0x76, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x76, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x09, 0x68, 0x61, 0x76, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5f, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x08,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x65, 0x65,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x22, 0x6d, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22,
	0x69, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x79, 0x63, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x79, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x22, 0x7f, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x89,
	0x02, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x6b, 0x0a, 0x0f, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x1d, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x09, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x2f, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b, 0x31, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x73, 0x74, 0x10, 0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x65, 0x61,
	0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_batch_proto_rawDescOnce sync.Once
	file_batch_proto_rawDescData = file_batch_proto_rawDesc
)

func file_batch_proto_rawDescGZIP() []byte {
	file_batch_proto_rawDescOnce.Do(func() {
		file_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_batch_proto_rawDescData)
	})
	return file_batch_proto_rawDescData
}

var file_batch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_batch_proto_goTypes = []any{
	(KeyType)(0),             // 0: proto.KeyType
	(*MultiSwap)(nil),        // 1: proto.MultiSwap
	(*Asset)(nil),            // 2: proto.Asset
	(*Swap)(nil),             // 3: proto.Swap
	(*SwapKey)(nil),          // 4: proto.SwapKey
	(*Batch)(nil),            // 5: proto.Batch
	(*InitArgs)(nil),         // 6: proto.InitArgs
	(*WriteElement)(nil),     // 7: proto.WriteElement
	(*ResponseError)(nil),    // 8: proto.ResponseError
	(*SwapResponse)(nil),     // 9: proto.SwapResponse
	(*AccountingRecord)(nil), // 10: proto.AccountingRecord
	(*Event)(nil),            // 11: proto.Event
	(*TxResponse)(nil),       // 12: proto.TxResponse
	(*BatchTxEvent)(nil),     // 13: proto.BatchTxEvent
	(*BatchEvent)(nil),       // 14: proto.BatchEvent
	(*BatchResponse)(nil),    // 15: proto.BatchResponse
	(*Nested)(nil),           // 16: proto.Nested
	(*TokenFee)(nil),         // 17: proto.TokenFee
	(*TokenRate)(nil),        // 18: proto.TokenRate
	(*Token)(nil),            // 19: proto.Token
	(*HaveRight)(nil),        // 20: proto.HaveRight
	(*Right)(nil),            // 21: proto.Right
	(*AccountRights)(nil),    // 22: proto.AccountRights
	(*Accounts)(nil),         // 23: proto.Accounts
	(*Operations)(nil),       // 24: proto.Operations
	(*OperationRights)(nil),  // 25: proto.OperationRights
	(*Industrial)(nil),       // 26: proto.Industrial
	(*IndustrialGroup)(nil),  // 27: proto.IndustrialGroup
	(*AccountInfo)(nil),      // 28: proto.AccountInfo
	(*Address)(nil),          // 29: proto.Address
	(*AdditionalKey)(nil),    // 30: proto.AdditionalKey
	(*SignedAddress)(nil),    // 31: proto.SignedAddress
	(*SignaturePolicy)(nil),  // 32: proto.SignaturePolicy
	(*AclResponse)(nil),      // 33: proto.AclResponse
	(*Nonce)(nil),            // 34: proto.Nonce
	(*PendingTx)(nil),        // 35: proto.pendingTx
	(*Pair)(nil),             // 36: proto.pair
}
var file_batch_proto_depIdxs = []int32{
	2,  // 0: proto.MultiSwap.assets:type_name -> proto.Asset
	3,  // 1: proto.Batch.swaps:type_name -> proto.Swap
	4,  // 2: proto.Batch.keys:type_name -> proto.SwapKey
	4,  // 3: proto.Batch.multi_swaps_keys:type_name -> proto.SwapKey
	1,  // 4: proto.Batch.multi_swaps:type_name -> proto.MultiSwap
	8,  // 5: proto.SwapResponse.error:type_name -> proto.ResponseError
	7,  // 6: proto.SwapResponse.writes:type_name -> proto.WriteElement
	8,  // 7: proto.TxResponse.error:type_name -> proto.ResponseError
	7,  // 8: proto.TxResponse.writes:type_name -> proto.WriteElement
	8,  // 9: proto.BatchTxEvent.error:type_name -> proto.ResponseError
	11, // 10: proto.BatchTxEvent.events:type_name -> proto.Event
	10, // 11: proto.BatchTxEvent.accounting:type_name -> proto.AccountingRecord
	13, // 12: proto.BatchEvent.events:type_name -> proto.BatchTxEvent
	12, // 13: proto.BatchResponse.tx_responses:type_name -> proto.TxResponse
	3,  // 14: proto.BatchResponse.created_swaps:type_name -> proto.Swap
	9,  // 15: proto.BatchResponse.swap_responses:type_name -> proto.SwapResponse
	9,  // 16: proto.BatchResponse.swap_key_responses:type_name -> proto.SwapResponse
	1,  // 17: proto.BatchResponse.created_multi_swap:type_name -> proto.MultiSwap
	29, // 18: proto.TokenRate.issuer:type_name -> proto.Address
	17, // 19: proto.Token.fee:type_name -> proto.TokenFee
	18, // 20: proto.Token.rates:type_name -> proto.TokenRate
	29, // 21: proto.Right.address:type_name -> proto.Address
	20, // 22: proto.Right.haveRight:type_name -> proto.HaveRight
	29, // 23: proto.AccountRights.address:type_name -> proto.Address
	21, // 24: proto.AccountRights.rights:type_name -> proto.Right
	29, // 25: proto.Accounts.addresses:type_name -> proto.Address
	21, // 26: proto.OperationRights.rights:type_name -> proto.Right
	27, // 27: proto.Industrial.groups:type_name -> proto.IndustrialGroup
	17, // 28: proto.Industrial.fee:type_name -> proto.TokenFee
	18, // 29: proto.Industrial.rates:type_name -> proto.TokenRate
	29, // 30: proto.SignedAddress.address:type_name -> proto.Address
	32, // 31: proto.SignedAddress.signaturePolicy:type_name -> proto.SignaturePolicy
	30, // 32: proto.SignedAddress.additionalKeys:type_name -> proto.AdditionalKey
	28, // 33: proto.AclResponse.account:type_name -> proto.AccountInfo
	31, // 34: proto.AclResponse.address:type_name -> proto.SignedAddress
	0,  // 35: proto.AclResponse.keyTypes:type_name -> proto.KeyType
	29, // 36: proto.pendingTx.sender:type_name -> proto.Address
	36, // 37: proto.pendingTx.pairs:type_name -> proto.pair
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_batch_proto_init() }
func file_batch_proto_init() {
	if File_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_batch_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SwapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*InitArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*WriteElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AccountingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BatchTxEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*BatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TokenFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TokenRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*HaveRight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Right); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AccountRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Accounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Operations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*OperationRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Industrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*IndustrialGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AdditionalKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SignedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SignaturePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AclResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*Nonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PendingTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_batch_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_batch_proto_goTypes,
		DependencyIndexes: file_batch_proto_depIdxs,
		EnumInfos:         file_batch_proto_enumTypes,
		MessageInfos:      file_batch_proto_msgTypes,
	}.Build()
	File_batch_proto = out.File
	file_batch_proto_rawDesc = nil
	file_batch_proto_goTypes = nil
	file_batch_proto_depIdxs = nil
}
